
// üöÄ Altere as vari√°veis para respeitarem o escopo em que foram declaradas.

// Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function;
// Modifique as vari√°veis para que respeitem o escopo onde est√£o declaradas;
// Modifique as concatena√ß√µes para template literals.

// function testingScope(escopo) {
//   if (escopo === true) {
//     var ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
//     ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
//     console.log(ifScope);
//   } else {
//     var elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
//     console.log(elseScope);
//   }
//   console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necess√°rio esta linha pode ser removida.
// }

// testingScope(true);

const testingScope = (escopo) => {
  if (escopo === true) {
    let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
    ifScope = `${ifScope} √≥timo, fui utilizada no escopo !`;
    console.log(ifScope);
  } else {
    const elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
    console.log(elseScope);
  }
}

testingScope(true);



// üöÄ Crie uma fun√ß√£o que retorne um array em ordem crescente.

// Crie uma fun√ß√£o que fa√ßa com que o array oddsAndEvens fique na ordem crescente;
// Utilize o console.log e template literals para retornar a frase: 'Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!'.

//     Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne a frase "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".

// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort(). Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros. 

const oddsAndEvens = [13, 3, 4, 10, 7, 2];
oddsAndEvens.sort((a, b) => a - b);

console.log(`Os n√∫meros ${oddsAndEvens} se encontram ordenados de forma crescente!`);

// Abaixo, voc√™ ver√° algumas especifica√ß√µes de algoritmos para desenvolver. √â fundamental que voc√™ utilize o que aprendeu sobre let, const, arrow functions, template literals e ternary operator.

// Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.

// Na matem√°tica, o fatorial de um n√∫mero inteiro e positivo N, representado por N!, √© o produto de todos os seus antecessores at√© o n√∫mero um. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
// B√¥nus (opcional): tente fazer o mesmo exerc√≠cio de forma recursiva. Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator.


const fatorial = (numb) => {

  let resultado = '1';

  for (let i = 2; i <= numb; i += 1) {
    resultado *= i;
  }
  return resultado;
}

console.log(fatorial(4));

// Crie uma fun√ß√£o que receba uma frase e retorne a maior palavra.

const longestWord = (str) => {
  const separaPalavras = str.split(' ');
  let maiorPalavra = '';

  for (let palavra of separaPalavras) {
    if (palavra.length > maiorPalavra.length) {
      maiorPalavra = palavra;
    }
  }
  return maiorPalavra;
}

longestWord('Ant√¥nio foi no banheiro e n√£o sabemos o que aconteceu')

/*

    üöÄ Crie uma p√°gina com um contador de cliques

Sua p√°gina deve conter:

    Um bot√£o ao qual ser√° associado um event listener;
    Uma vari√°vel clickCount no arquivo JavaScript que acumule o n√∫mero de clicks no bot√£o;
    Um campo no HTML que v√° atualizando a quantidade de clicks no bot√£o conforme a vari√°vel clickCount √© atualizada.

*/

const btn = document.createElement('button');
document.body.appendChild(btn);
btn.innerText = 'CLICK ME'
btn.className = ('btn');


const paragraph = document.createElement('p');
document.body.appendChild(paragraph);
paragraph.innerText = 'Clicke no bot√£o';

let clickCount = 0;

btn.addEventListener('click', (event) => {
  clickCount += 1;

  if (clickCount === 1) {
    paragraph.innerText = `O foi clickado ${clickCount} vez`;
  }else{
    paragraph.innerText = `O bot√£o j√° foi clickado ${clickCount} vezes`;
  }
});

/*
    üöÄ Crie duas fun√ß√µes JavaScript com as seguintes especifica√ß√µes:

N√£o se esque√ßa de usar template literals

    Fun√ß√£o 1: Escreva uma fun√ß√£o que substitua a letra 'x' em uma frase.
        A fun√ß√£o dever√° receber um nome por par√¢metro;
        Declare dentro da fun√ß√£o uma vari√°vel com o nome frase, do tipo const e com o valor igual a 'Tryber x aqui!';
        A fun√ß√£o dever√° retornar uma nova frase onde o x da frase 'Tryber x aqui!' seja substitu√≠do pelo nome passado por par√¢metro.
    Exemplo:
        Par√¢metro: 'Bebeto'
        Retorno: 'Tryber Bebeto aqui!'
    Fun√ß√£o 2: Escreva uma fun√ß√£o que ir√° receber o retorno da Fun√ß√£o 1 por par√¢metro e retornar√° uma nova string.
        A fun√ß√£o dever√° receber o retorno da Fun√ß√£o 1 por par√¢metro;
        Declare dentro da fun√ß√£o uma vari√°vel com o nome skills, do tipo const;
            A vari√°vel skills dever√° ser um array contendo tr√™s strings com tecnologias que voc√™ j√° aprendeu.
        Concatene o valor retornado da Fun√ß√£o 1, a frase 'Minhas tr√™s principais habilidades s√£o:' e o valor da vari√°vel skills.
    Exemplo de retorno:
    Tryber Bebeto aqui!
    Minhas tr√™s principais habilidades s√£o:
        JavaScript
        HTML
        CSS
*/

const suprisePhrase = (name) => {
  const phrase = 'Tryber x aqui!';
  const newPhrase = phrase.replace('x', name);
  return newPhrase;
}

const finalPhrase = (newPhrase) => {
  const skills = ['JavaScript', 'HTML', 'CSS'];

return (`${newPhrase}
Minhas tr√™s principais habilidades s√£o:
${skills[0]}
${skills[1]}
${skills[2]}`);
}
console.log(finalPhrase(suprisePhrase('Ronaldinho')));




