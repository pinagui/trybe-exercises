
    // üöÄ Altere as vari√°veis para respeitarem o escopo em que foram declaradas.

    // Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function;
    // Modifique as vari√°veis para que respeitem o escopo onde est√£o declaradas;
    // Modifique as concatena√ß√µes para template literals.

    // function testingScope(escopo) {
    //   if (escopo === true) {
    //     var ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
    //     ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
    //     console.log(ifScope);
    //   } else {
    //     var elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
    //     console.log(elseScope);
    //   }
    //   console.log(ifScope + ' o que estou fazendo aqui ? :O'); // Se necess√°rio esta linha pode ser removida.
    // }

    // testingScope(true);

    const testingScope = (escopo) => {
      if (escopo === true) {
        let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
        ifScope = `${ifScope} √≥timo, fui utilizada no escopo !`;
        console.log(ifScope);
      } else {
        const elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
        console.log(elseScope);
      }
    }

    testingScope(true);



    // üöÄ Crie uma fun√ß√£o que retorne um array em ordem crescente.

    // Crie uma fun√ß√£o que fa√ßa com que o array oddsAndEvens fique na ordem crescente;
    // Utilize o console.log e template literals para retornar a frase: 'Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!'.
    
    //     Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne a frase "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".

    // B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort(). Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros. 

    const oddsAndEvens = [13, 3, 4, 10, 7, 2];
    oddsAndEvens.sort((a, b) => a - b);
    
    console.log(`Os n√∫meros ${oddsAndEvens} se encontram ordenados de forma crescente!`);

    // Abaixo, voc√™ ver√° algumas especifica√ß√µes de algoritmos para desenvolver. √â fundamental que voc√™ utilize o que aprendeu sobre let, const, arrow functions, template literals e ternary operator.

    // Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.

    // Na matem√°tica, o fatorial de um n√∫mero inteiro e positivo N, representado por N!, √© o produto de todos os seus antecessores at√© o n√∫mero um. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
    // B√¥nus (opcional): tente fazer o mesmo exerc√≠cio de forma recursiva. Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator.


const fatorial = (numb) => {

  let resultado = '1'; 

  for(let i = 2; i <= numb; i += 1){
    resultado *= i;
  }
  return resultado;
}

console.log(fatorial(4));
